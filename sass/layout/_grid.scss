/*  */
.row {
	/* max-width best because if we have enough available space it will use value specified - otherwise fill 100% */
	max-width: $grid-width; /* 1140px/10 = 114rem - standard definition of a row */
	background-color: #eee;
	margin: 0 auto; /* Trick used to center block elements inside another block element - left and right auto  */

	&:not(:last-child) {
		/* without "not" this would select ".row:last-child() - "not" does the opposite - everything except the last child */
		margin-bottom: $gutter-vertical; /* all rows except last will receive margin  */
	}

	@include clearfix; /*row has a zero pixel height because all child elements of this row element are floated so the
                        height collapses and becomes zero - solution ... "clearfix" hack  */

	[class^="col-"] {
		background-color: orangered;
		float: left; /* Since we are using a float layout we always want the columns floated to left side   */

		&:not(:last-child) {
			margin-right: $gutter-horizontal; /* Allows for gutter between columns except the last  */
		}
	}

	.col-1-of-2 {
		width: calc((100% - #{$gutter-horizontal}) / 2);
	}

	.col-1-of-3 {
		width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
	}

	.col-2-of-3 {
		width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
	}

	.col-1-of-4 {
		width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
	}
}
