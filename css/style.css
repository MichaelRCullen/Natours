@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/*   */
/* Simple Browser basic reset using universal */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* Use the power of inheritance - forces inheritance to all sub elements - box-sizing property by itself is not inherited */ }

html {
  /* Changing the global "root font size" - rem value scales according to this root value  */
  font-size: 62.5%;
  /* Allows conversion of all absolute pixel units to relative rem units - easy way to change all measurements with one simple setting - best practice is % of default browser font size of 16px  */ }

body {
  box-sizing: border-box;
  /* Change the box model so borders and paddings are no longer added to total height and width that we specify for the box */ }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px;  now covered with global "root font size" setting above in html element*/
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  /* original was 30px */ }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Corrects minor animation shake */
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /* Block level elements occupy the entire width available, and create line breaks before and after them */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    /* using @keyframes */
    animation-duration: 3s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 400;
    letter-spacing: 1.75rem;
    animation: moveInRight 3s ease-out;
    /* using @keyframes combined */ }

.btn:link, .btn:visited {
  /* :link is a pseudo class - a special state of a selector - to style elements under a speacial condition */
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* inline element because it is simply text - box model now works on this element as if it is a normal block element */
  border-radius: 10rem;
  transition: all .2s;
  /* shorthand version - transform on hover and active will be animated in relation to initial state - transition must be on initial state  */
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all .4s; }

.btn--animated {
  animation: moveInBottom .5s ease-out .75s;
  animation-fill-mode: backwards; }

/*  */
.row {
  /* max-width best because if we have enough available space it will use value specified - otherwise fill 100% */
  max-width: 114rem;
  /* 1140px/10 = 114rem - standard definition of a row */
  background-color: #eee;
  margin: 0 auto;
  /* Trick used to center block elements inside another block element - left and right auto  */
  /*row has a zero pixel height because all child elements of this row element are floated so the
                        height collapses and becomes zero - solution ... "clearfix" hack  */ }
  .row:not(:last-child) {
    /* without "not" this would select ".row:last-child() - "not" does the opposite - everything except the last child */
    margin-bottom: 8rem;
    /* all rows except last will receive margin  */ }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left;
    /* Since we are using a float layout we always want the columns floated to left side   */ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem;
      /* Allows for gutter between columns except the last  */ }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }

.header {
  height: 95vh;
  /* at every point the height of this element should be 95% of the viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    /* Image is an inline element so a small container wrapper is good practice to style the image */
    position: absolute;
    /* notes tbd  */
    top: 4rem;
    /* position measurement starts with a parent element (.header) reference set as "position: relative"  */
    left: 4rem; }
  .header__logo {
    height: 3.5rem;
    /* width will scale accordingly when not specified and vice versa - prefer to control height of an element  */ }
  .header__text-box {
    position: absolute;
    /* element is removed from normal flow - no impact on surrounding content or elements - can overlap other elements */
    top: 40%;
    /* In relation to parent element */
    left: 50%;
    /* In relation to parent element */
    transform: translate(-50%, -50%);
    /* -50% no longer in relation to parent element - but of the element itself */
    text-align: center; }
